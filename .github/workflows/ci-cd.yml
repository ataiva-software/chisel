name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Build
      run: go build -o bin/chisel ./cmd/chisel
    
    - name: Test CLI
      run: |
        ./bin/chisel --help
        cd /tmp
        ./bin/chisel init test-project
        cd test-project
        ./bin/chisel plan --module modules/webserver.yaml --inventory inventory/hosts.yaml

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION=${LATEST_TAG#v}
          IFS='.' read -ra PARTS <<< "$VERSION"
          MAJOR=${PARTS[0]:-0}
          MINOR=${PARTS[1]:-0}
          PATCH=${PARTS[2]:-0}
          
          case "${{ github.event.inputs.release_type }}" in
            major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR + 1)); PATCH=0 ;;
            patch) PATCH=$((PATCH + 1)) ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "tag_name=${NEW_VERSION}" >> $GITHUB_OUTPUT
        else
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "version=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create tag (if manual release)
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag ${{ steps.version.outputs.tag_name }}
        git push origin ${{ steps.version.outputs.tag_name }}
    
    - name: Build release binaries
      run: |
        mkdir -p bin
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o bin/chisel-linux-amd64 ./cmd/chisel
        GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o bin/chisel-linux-arm64 ./cmd/chisel
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o bin/chisel-darwin-amd64 ./cmd/chisel
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o bin/chisel-darwin-arm64 ./cmd/chisel
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o bin/chisel-windows-amd64.exe ./cmd/chisel
        
        cd bin
        sha256sum chisel-* > checksums.txt
    
    - name: Generate changelog
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [[ -n "$LAST_TAG" ]]; then
          git log --pretty=format:"- %s" ${LAST_TAG}..HEAD > changelog.txt
        else
          echo "Initial release" > changelog.txt
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: Release ${{ steps.version.outputs.tag_name }}
        body_path: changelog.txt
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
        files: |
          bin/chisel-linux-amd64
          bin/chisel-linux-arm64
          bin/chisel-darwin-amd64
          bin/chisel-darwin-arm64
          bin/chisel-windows-amd64.exe
          bin/checksums.txt
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
